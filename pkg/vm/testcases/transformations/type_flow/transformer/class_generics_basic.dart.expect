library #lib;
import self as self;
import "dart:core" as core;

class C<T extends core::Object = dynamic> extends core::Object {
  synthetic constructor •() → void
    : super core::Object::•()
    ;
  method foo() → dynamic
    return new self::D::•<self::C::T>();
}
class D<T extends core::Object = dynamic> extends core::Object {
  synthetic constructor •() → void
    : super core::Object::•()
    ;
}
class E<S extends core::Object = dynamic, T extends core::Object = dynamic> extends self::C<self::E::T> {
  synthetic constructor •() → void
    : super self::C::•()
    ;
  method foo() → dynamic
    return [@vm.inferred-type.metadata=#lib::D<dart.core::String>] super.{self::C::foo}();
  method bar() → dynamic
    return new self::D::•<self::E::S>();
  method baz() → dynamic
    return new self::D::•<self::E::T>();
}
static method main() → dynamic {
  dynamic used;
  used = [@vm.direct-call.metadata=#lib::C::foo] [@vm.inferred-type.metadata=#lib::D<dart.core::int>] new self::C::•<core::int>().{self::C::foo}();
  used = [@vm.direct-call.metadata=#lib::E::foo] [@vm.inferred-type.metadata=#lib::D<dart.core::String>] new self::E::•<core::int, core::String>().{self::E::foo}();
  used = [@vm.direct-call.metadata=#lib::E::bar] [@vm.inferred-type.metadata=#lib::D<dart.core::int>] new self::E::•<core::int, core::String>().{self::E::bar}();
  used = [@vm.direct-call.metadata=#lib::E::baz] [@vm.inferred-type.metadata=#lib::D<dart.core::String>] new self::E::•<core::int, core::String>().{self::E::baz}();
  return used;
}
